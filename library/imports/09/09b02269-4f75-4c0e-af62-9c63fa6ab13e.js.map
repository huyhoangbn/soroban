{"version":3,"sources":["assets\\scripts\\miniGame\\raphael\\component\\R.style.js"],"names":["LineJoin","cc","Graphics","LineCap","Style","properties","_lineWidth","undefined","_strokeColor","_fillColor","_lineJoin","_lineCap","_miterLimit","_dashOffset","_dashArray","lineWidth","get","set","value","_dirty","lineJoin","MITER","type","lineCap","BUTT","strokeColor","Color","BLACK","fillColor","WHITE","miterLimit","dashOffset","dashArray","Array","isArray","getStyled","parent","getStyledColor","fromHEX","_applyStyle","ctx","module","exports"],"mappings":"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","sourceRoot":"/","sourcesContent":["\nvar LineJoin = cc.Graphics.LineJoin;\nvar LineCap = cc.Graphics.LineCap;\n\nvar Style = {\n    properties: {\n        _lineWidth: undefined,\n        _strokeColor: undefined,\n        _fillColor: undefined,\n        _lineJoin: undefined,\n        _lineCap: undefined,\n        _miterLimit: undefined,\n\n        _dashOffset: undefined,\n        _dashArray: undefined,\n\n        lineWidth: {\n            get: function () {\n                return this._lineWidth || 1;\n            },\n            set: function (value) {\n                this._lineWidth = value;\n                this._dirty = true;\n            }\n        },\n\n        lineJoin: {\n            get: function () {\n                return this._lineJoin || LineJoin.MITER;\n            },\n            set: function (value) {\n                this._lineJoin = value;\n                this._dirty = true;\n            },\n            type: LineJoin\n        },\n\n        lineCap: {\n            get: function () {\n                return this._lineCap || LineCap.BUTT;\n            },\n            set: function (value) {\n                this._lineCap = value;\n                this._dirty = true;\n            },\n            type: LineCap\n        },\n\n        strokeColor: {\n            get: function () {\n                return this._strokeColor || cc.Color.BLACK;\n            },\n            set: function (value) {\n                this._strokeColor = value;\n                this._dirty = true;\n            }\n        },\n\n        fillColor: {\n            get: function () {\n                return this._fillColor || cc.Color.WHITE;\n            },\n            set: function (value) {\n                this._fillColor = value;\n                this._dirty = true;\n            }\n        },\n\n        miterLimit: {\n            get: function () {\n                return this._miterLimit || 10;\n            },\n            set: function (value) {\n                this._miterLimit = value;\n                this._dirty = true;\n            }\n        },\n\n        dashOffset: {\n            get: function () {\n                return this._dashOffset || 0;\n            },\n            set: function (value) {\n                if (this._dashOffset === value) {\n                    return;\n                }\n                this._dashOffset = value;\n                this._dirty = true;\n            }\n        },\n        dashArray: {\n            get: function () {\n                return this._dashArray || [];\n            },\n            set: function (value) {\n                if (!Array.isArray(value)) {\n                    return;\n                }\n                this._dashArray = value;\n                this._dirty = true;\n            }\n        },\n    },\n\n    getStyled: function (type) {\n        var value = this['_' + type];\n        \n        if (value === 'inherit' || value === undefined) {\n            if (this.parent) value = this.parent.getStyled(type);\n            else value = this[type];\n        }\n\n        return value;\n    },\n\n    getStyledColor: function (type) {\n        var value = this.getStyled(type);\n\n        if (value === 'none' || !value) {\n            value = null;\n        }\n        else if (typeof value === 'string') {\n            value = new cc.Color().fromHEX(value);\n        }\n\n        return value;\n    },\n\n    _applyStyle: function () {\n        var ctx = this.ctx;\n        ctx.lineWidth = this.getStyled('lineWidth');\n        ctx.lineJoin = this.getStyled('lineJoin');\n        ctx.lineCap = this.getStyled('lineCap');\n\n        var strokeColor = this.getStyledColor('strokeColor');\n        var fillColor = this.getStyledColor('fillColor');\n\n        if (strokeColor)\n            ctx.strokeColor = strokeColor;\n        if (fillColor)\n            ctx.fillColor = fillColor;\n    }\n};\n\nmodule.exports = Style;\n"]}