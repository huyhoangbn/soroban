{"version":3,"sources":["assets\\scripts\\miniGame\\raphael\\component\\optional\\R.simplify.js"],"names":["EPSILON","TOLERANCE","Fitter","fit","path","error","commands","points","_commands","forEach","cmd","c","push","cc","v2","length","fitCubic","sub","normalize","first","last","tan1","tan2","pt1","pt2","dist","mag","addCurve","add","mulSelf","uPrime","chordLengthParameterize","maxError","Math","max","split","parametersInOrder","i","curve","generateBezier","findMaxError","index","reparameterize","V1","V2","tanCenter","div","mul","x","y","epsilon","C","X","l","u","t","b","b0","b1","b2","b3","a1","a2","tmp","dot","detC0C1","alpha1","alpha2","abs","detC0X","detXC1","c0","c1","segLength","eps","handle1","handle2","line","findRoot","point","curve1","curve2","pt","evaluate","diff","df","degree","slice","j","m","floor","maxDist","P","v","module","exports","simplify"],"mappings":"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","sourceRoot":"/","sourcesContent":["var EPSILON = 1e-12;\nvar TOLERANCE = 1e-6;\n\nvar Fitter = {\n    fit: function (path, error) {\n        this.commands = [];\n        this.error = error || 10;\n\n        var points = this.points = [];\n        path._commands.forEach( function (cmd) {\n            var c = cmd[0];\n\n            if (c === 'M') {\n                points.push( cc.v2(cmd[1], cmd[2]) );\n            }\n            else if(c === 'C') {\n                points.push( cc.v2(cmd[5], cmd[6]) );\n            }\n        });\n\n\n        var length = points.length;\n\n        if (length > 1) {\n            this.fitCubic(0, length - 1,\n                // Left Tangent\n                points[1].sub(points[0]).normalize(),\n                // Right Tangent\n                points[length - 2].sub(points[length - 1]).normalize());\n        }\n\n        return this.commands;\n    },\n\n    // Fit a Bezier curve to a (sub)set of digitized points\n    fitCubic: function (first, last, tan1, tan2) {\n        //  Use heuristic if region only has two points in it\n        if (last - first === 1) {\n            var pt1 = this.points[first],\n                pt2 = this.points[last],\n                dist = pt1.sub(pt2).mag() / 3;\n            this.addCurve([pt1, pt1.add(tan1.normalize().mulSelf(dist)),\n                    pt2.add(tan2.normalize().mulSelf(dist)), pt2]);\n            return;\n        }\n        // Parameterize points, and attempt to fit curve\n        var uPrime = this.chordLengthParameterize(first, last),\n            maxError = Math.max(this.error, this.error * this.error),\n            split,\n            parametersInOrder = true;\n        // Try 4 iterations\n        for (var i = 0; i <= 4; i++) {\n            var curve = this.generateBezier(first, last, uPrime, tan1, tan2);\n            //  Find max deviation of points to fitted curve\n            var max = this.findMaxError(first, last, curve, uPrime);\n            if (max.error < this.error && parametersInOrder) {\n                this.addCurve(curve);\n                return;\n            }\n            split = max.index;\n            // If error not too large, try reparameterization and iteration\n            if (max.error >= maxError)\n                break;\n            parametersInOrder = this.reparameterize(first, last, uPrime, curve);\n            maxError = max.error;\n        }\n        // Fitting failed -- split at max error point and fit recursively\n        var V1 = this.points[split - 1].sub(this.points[split]),\n            V2 = this.points[split].sub(this.points[split + 1]),\n            tanCenter = V1.add(V2).div(2).normalize();\n        this.fitCubic(first, split, tan1, tanCenter);\n        this.fitCubic(split, last, tanCenter.mul(-1), tan2);\n    },\n\n    addCurve: function(curve) {\n        if (this.commands.length === 0) {\n            this.commands.push(['M', curve[0].x, curve[0].y]);\n        }\n        else {\n            var cmd = this.commands[this.commands.length - 1];\n            cmd[5] = curve[0].x;\n            cmd[6] = curve[0].y;\n        }\n\n        this.commands.push(['C', curve[1].x, curve[1].y, curve[2].x, curve[2].y, curve[3].x, curve[3].y]);\n    },\n\n    // Use least-squares method to find Bezier control points for region.\n    generateBezier: function(first, last, uPrime, tan1, tan2) {\n        var epsilon = /*#=*/EPSILON,\n            pt1 = this.points[first],\n            pt2 = this.points[last],\n            // Create the C and X matrices\n            C = [[0, 0], [0, 0]],\n            X = [0, 0];\n\n        for (var i = 0, l = last - first + 1; i < l; i++) {\n            var u = uPrime[i],\n                t = 1 - u,\n                b = 3 * u * t,\n                b0 = t * t * t,\n                b1 = b * t,\n                b2 = b * u,\n                b3 = u * u * u,\n                a1 = tan1.normalize().mulSelf(b1),\n                a2 = tan2.normalize().mulSelf(b2),\n                tmp = this.points[first + i]\n                    .sub(pt1.mul(b0 + b1))\n                    .sub(pt2.mul(b2 + b3));\n            C[0][0] += a1.dot(a1);\n            C[0][1] += a1.dot(a2);\n            // C[1][0] += a1.dot(a2);\n            C[1][0] = C[0][1];\n            C[1][1] += a2.dot(a2);\n            X[0] += a1.dot(tmp);\n            X[1] += a2.dot(tmp);\n        }\n\n        // Compute the determinants of C and X\n        var detC0C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1],\n            alpha1, alpha2;\n        if (Math.abs(detC0C1) > epsilon) {\n            // Kramer's rule\n            var detC0X  = C[0][0] * X[1]    - C[1][0] * X[0],\n                detXC1  = X[0]    * C[1][1] - X[1]    * C[0][1];\n            // Derive alpha values\n            alpha1 = detXC1 / detC0C1;\n            alpha2 = detC0X / detC0C1;\n        } else {\n            // Matrix is under-determined, try assuming alpha1 == alpha2\n            var c0 = C[0][0] + C[0][1],\n                c1 = C[1][0] + C[1][1];\n            if (Math.abs(c0) > epsilon) {\n                alpha1 = alpha2 = X[0] / c0;\n            } else if (Math.abs(c1) > epsilon) {\n                alpha1 = alpha2 = X[1] / c1;\n            } else {\n                // Handle below\n                alpha1 = alpha2 = 0;\n            }\n        }\n\n        // If alpha negative, use the Wu/Barsky heuristic (see text)\n        // (if alpha is 0, you get coincident control points that lead to\n        // divide by zero in any subsequent NewtonRaphsonRootFind() call.\n        var segLength = pt2.sub(pt1).mag(),\n            eps = epsilon * segLength,\n            handle1,\n            handle2;\n        if (alpha1 < eps || alpha2 < eps) {\n            // fall back on standard (probably inaccurate) formula,\n            // and subdivide further if needed.\n            alpha1 = alpha2 = segLength / 3;\n        } else {\n            // Check if the found control points are in the right order when\n            // projected onto the line through pt1 and pt2.\n            var line = pt2.sub(pt1);\n            // Control points 1 and 2 are positioned an alpha distance out\n            // on the tangent vectors, left and right, respectively\n            handle1 = tan1.normalize().mulSelf(alpha1);\n            handle2 = tan2.normalize().mulSelf(alpha2);\n            if (handle1.dot(line) - handle2.dot(line) > segLength * segLength) {\n                // Fall back to the Wu/Barsky heuristic above.\n                alpha1 = alpha2 = segLength / 3;\n                handle1 = handle2 = null; // Force recalculation\n            }\n        }\n\n        // First and last control points of the Bezier curve are\n        // positioned exactly at the first and last data points\n        return [pt1, pt1.add(handle1 || tan1.normalize().mulSelf(alpha1)),\n                pt2.add(handle2 || tan2.normalize().mulSelf(alpha2)), pt2];\n    },\n\n    // Given set of points and their parameterization, try to find\n    // a better parameterization.\n    reparameterize: function(first, last, u, curve) {\n        for (var i = first; i <= last; i++) {\n            u[i - first] = this.findRoot(curve, this.points[i], u[i - first]);\n        }\n        // Detect if the new parameterization has reordered the points.\n        // In that case, we would fit the points of the path in the wrong order.\n        for (var i = 1, l = u.length; i < l; i++) {\n            if (u[i] <= u[i - 1])\n                return false;\n        }\n        return true;\n    },\n\n    // Use Newton-Raphson iteration to find better root.\n    findRoot: function(curve, point, u) {\n        var curve1 = [],\n            curve2 = [];\n        // Generate control vertices for Q'\n        for (var i = 0; i <= 2; i++) {\n            curve1[i] = curve[i + 1].sub(curve[i]).mul(3);\n        }\n        // Generate control vertices for Q''\n        for (var i = 0; i <= 1; i++) {\n            curve2[i] = curve1[i + 1].sub(curve1[i]).mul(2);\n        }\n        // Compute Q(u), Q'(u) and Q''(u)\n        var pt = this.evaluate(3, curve, u),\n            pt1 = this.evaluate(2, curve1, u),\n            pt2 = this.evaluate(1, curve2, u),\n            diff = pt.sub(point),\n            df = pt1.dot(pt1) + diff.dot(pt2);\n        // Compute f(u) / f'(u)\n        if (Math.abs(df) < /*#=*/TOLERANCE)\n            return u;\n        // u = u - f(u) / f'(u)\n        return u - diff.dot(pt1) / df;\n    },\n\n    // Evaluate a bezier curve at a particular parameter value\n    evaluate: function(degree, curve, t) {\n        // Copy array\n        var tmp = curve.slice();\n        // Triangle computation\n        for (var i = 1; i <= degree; i++) {\n            for (var j = 0; j <= degree - i; j++) {\n                tmp[j] = tmp[j].mul(1 - t).add(tmp[j + 1].mul(t));\n            }\n        }\n        return tmp[0];\n    },\n\n    // Assign parameter values to digitized points\n    // using relative distances between points.\n    chordLengthParameterize: function(first, last) {\n        var u = [0];\n        for (var i = first + 1; i <= last; i++) {\n            u[i - first] = u[i - first - 1]\n                    + this.points[i].sub(this.points[i - 1]).mag();\n        }\n        for (var i = 1, m = last - first; i <= m; i++) {\n            u[i] /= u[m];\n        }\n        return u;\n    },\n\n    // Find the maximum squared distance of digitized points to fitted curve.\n    findMaxError: function(first, last, curve, u) {\n        var index = Math.floor((last - first + 1) / 2),\n            maxDist = 0;\n        for (var i = first + 1; i < last; i++) {\n            var P = this.evaluate(3, curve, u[i - first]);\n            var v = P.sub(this.points[i]);\n            var dist = v.x * v.x + v.y * v.y; // squared\n            if (dist >= maxDist) {\n                maxDist = dist;\n                index = i;\n            }\n        }\n        return {\n            error: maxDist,\n            index: index\n        };\n    }\n};\n\nmodule.exports = {\n    simplify: function () {\n        this._commands = Fitter.fit(this);\n    }\n};\n"]}