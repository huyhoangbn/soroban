{"version":3,"sources":["assets\\scripts\\Task.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Global } from \"./Global\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Task extends cc.Component {\r\n    @property (cc.Node)\r\n    abacus: cc.Node = null;\r\n\r\n    numbers: number[] = [];\r\n    result: number = 0;\r\n\r\n    initialized: boolean = false;\r\n\r\n    initialize() {\r\n        this.randomizeTask(Global.currentChallenge);\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    randomizeTask(type: string) {\r\n        if(!this.initialized) return;\r\n\r\n        this.result = 0;\r\n        \r\n        if(type == \"addition\") {\r\n            this.randomizeNumbers(3, 90 , 10);\r\n        } else if(type == \"subtraction\") {\r\n            while(true) {\r\n                this.randomizeNumbers(3, 90, 10);\r\n\r\n                // prevent subtraction result from being negative\r\n                let total = this.numbers[0];\r\n                for(let i = 1; i < this.numbers.length; ++i) total -= this.numbers[i];\r\n                if(total >= 0) break;\r\n            }\r\n        } else if(type == \"multiplication\") {\r\n            this.randomizeNumbers(2, 2, 10);\r\n        } else if(type == \"division\") {\r\n            while(true) {\r\n                this.numbers = [];\r\n                this.numbers.push(Math.round(Math.random() * 1000 + 1000));\r\n                this.numbers.push(Math.round(Math.random() * 3 + 2));\r\n\r\n                if(Number.isInteger(this.numbers[0] / this.numbers[1])) break;\r\n            }\r\n        } \r\n\r\n        let label = this.node.getComponent(cc.Label)\r\n        label.string = \"\";\r\n\r\n        // set up label and calculate result\r\n        this.numbers.forEach((value: number, index: number) => {\r\n            label.string += value.toString();\r\n\r\n            if(index < this.numbers.length - 1) {\r\n                switch(type) {\r\n                    case \"addition\": label.string += \" + \"; break;\r\n                    case \"subtraction\": label.string += \" - \"; break;\r\n                    case \"multiplication\": label.string += \" * \"; break;\r\n                    case \"division\": label.string += \" / \"; break;\r\n                    default: break;\r\n                }\r\n            }\r\n            else label.string += \" = \";\r\n\r\n            switch(type) {\r\n                case \"addition\": \r\n                    this.result += value;\r\n                    break;\r\n                case \"subtraction\":\r\n                    if(index == 0) this.result = value;\r\n                    else this.result -= value;\r\n                    break;\r\n                case \"multiplication\":\r\n                    if(index == 0) this.result = 1;\r\n                    this.result *= value;\r\n                    break;\r\n                case \"division\":\r\n                    if(index == 0) this.result = value;\r\n                    else this.result /= value;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        console.log(\"Result: \" + this.result);\r\n    }\r\n\r\n    private randomizeNumbers(amount: number, lowRange: number, highRange: number) {\r\n        this.numbers = [];\r\n        for(let i = 0; i < amount; ++i)\r\n            this.numbers.push(Math.round(Math.random() * (highRange - lowRange) + lowRange));\r\n    }\r\n\r\n    update(dt) {\r\n        if(this.abacus.getComponent(\"Abacus\").score == this.result) {\r\n            this.abacus.getComponent(\"Abacus\").reset();\r\n            this.randomizeTask(Global.currentChallenge);\r\n        }\r\n    }\r\n}\r\n"]}